//Author: Phillip Meza
//Course: CPT187
//Purpose:To control the flow of use
//through each order from the account process to the checkout 
//STARTDATE:4/20/2022

package edu.cpt187.meza.exercise6;
import java.util.Scanner;
//open class
public class MainClass 
{ 
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};//main menu characters
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};//name for menu options
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};//Order menu characters
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};//name for Order menu options
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};//menu characters for non-main menus
	public static final String INVENTORY_FILE_NAME = "MasterOrderFile.dat";//order file name
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";//account file name
	//main method 
	public static void main(String[] args)
	{
		Order currentOrder = new Order();//links Order class
		Inventory currentInventory = new Inventory();//links Inventory class
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);//links WriteOrder class
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		Scanner input = new Scanner(System.in);//opens Scanner for input/ user interaction

		char menuSelection = ' ';//stores menu selection inputs
		String userName = "";//stores user's name

		displayWelcomeBanner();//welcomes the user
		menuSelection = validateMainMenu(input);//sets menuSelection to valid input
		//while main != Quit
		while(menuSelection != MENU_CHARS[2])
		{
			currentUser.setUserAccountArrays();//reads for account file and sets arrays
			userName = getUserName(input);//sets userName
			//if main == 'A'
			if(menuSelection != MENU_CHARS[0])
			{
				currentUser.setSearchedIndex(userName);//searches for existing account
				//if positive result
				if(currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);//displays existing account error
				}//closes if
				//else negative result
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));//writes userName and password to accountFile
					displayAccountResults();//display new account confirmation
				}//closes else
			}//closes main == 'A'
			else
			{
				currentUser.setSearchedIndex(userName,getPassword(input));//tests userName and password
				//if login fail
				if(currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();//displays error on login
				}//closes login fail
				//else: login success
				else
				{
					menuSelection = validateFileSelection(input);//sets menuSelection to valid input
					//while fileSelection != 'R'
					while (menuSelection != FILE_MENU_CHARS[2])
					{
						//if fileSelection == 'A'
						if (menuSelection == FILE_MENU_CHARS[0])
						{
							currentInventory.setLoadItems(getFilename(input));//opens item file
							//if file not found
							if (currentInventory.getRecordCount() <= 0)
							{
								displayNotOpen();//displays file error
							}//closes file error
							//file found and loaded
							else
							{
								displayRecordReport(currentInventory.getRecordCount());//displays index size
							}//file found
						}//closes if fileSelection == A
						//else: fileSelection == 'B'
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));//sets index to search for items
							//if item not found
							if(currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();//displays search error
							}//closes search error
							//search success
							else
							{
								currentOrder.setLastItemIndex(currentInventory.getItemSearchIndex());//sets lastItemIndex in Order
								currentOrder.setItemID(currentInventory.getItemIDs());//sets itemId in Order
								currentOrder.setItemName(currentInventory.getItemNames());//sets itemName in Order
								currentOrder.setItemPrice(currentInventory.getItemPrices());//sets itemPrice in Order
								currentOrder.setHowMany(validateHowMany(input));//sets howMany in Order
								//if out of stock
								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();//displays stock error
								}//closes if out of stock
								//in stock
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(),currentInventory.getDiscountRates()));//sets discountType based on valid input
									currentOrder.setDiscountName(currentInventory.getDiscountNames());//sets discountName in Order
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());//sets discountRate in Order
									currentOrder.setDecreaseInStock(currentInventory);//subtracts howMany from inStock in Order
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());//sets prizeName in Order
									//writes order to order file 
									orders.setWriteOrder(currentOrder.getItemID(),currentOrder.getItemName(),currentOrder.getItemPrice(),currentOrder.getHowMany(),currentOrder.getTotalCost());
									//if discount
									if (currentOrder.getDiscountRate() > 0.0)
									{
										//displays Order Report with discounts
										displayOrderReport(userName,currentOrder.getItemName(),currentOrder.getItemPrice(),currentOrder.getHowMany(),currentOrder.getDiscountName(),currentOrder.getDiscountRate(),currentOrder.getDiscountAmt(),currentOrder.getDiscountPrice(),currentOrder.getSubTotal(),currentOrder.getTaxRate(),currentOrder.getTaxAmt(),currentOrder.getTotalCost(),currentOrder.getPrizeName(),currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//closes if discount
									//no discount
									else
									{
										//displays Order Report without discounts
										displayOrderReport(userName,currentOrder.getItemName(),currentOrder.getItemPrice(),currentOrder.getHowMany(),currentOrder.getSubTotal(),currentOrder.getTaxRate(),currentOrder.getTaxAmt(),currentOrder.getTotalCost(),currentOrder.getPrizeName(),currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//closes no discount
								}//closes in stock
							}//closes search success
						}//closes fileSelection == A
						menuSelection = validateFileSelection(input);//sets menuSelection to valid input
					}//closes fileSelection != R
				}//closes login success
			}//closes main == 'B'
			menuSelection = validateMainMenu(input);//sets menuSelection to valid input
		}//closes main != Q
		currentInventory.setLoadItems(orders.getFileName(),orders.getRecordCount());//reads order file and sets item arrays
		//if order counted
		if(orders.getRecordCount() > 0)
		{
			//displays Final Report of all orders
			displayFinalReport(currentInventory.getItemIDs(),currentInventory.getItemNames(),currentInventory.getItemPrices(),currentInventory.getOrderQuantities(),currentInventory.getOrderTotals(),currentInventory.getRecordCount(),currentInventory.getGrandTotal());
		}
		displayFarewellMessage();//tells the user farewell
		input.close();//closes input
	}//closes main
	//displays welcome
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to \"Da Sto\"");
		System.out.println("Made simply to set proper item list");
		System.out.println("and complete an order of the product desired.");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
	}//closes displayWelcomeBanner
	//displays farewell
	public static void displayFarewellMessage()
	{
		System.out.println("Thank you, and come again");
	}//closes displayFarewellBanner
	//displays Main Menu
	public static void displayMainMenu()
	{
		int localIndex = 0;//local value for indexes
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("Main Menu");//title
		//while localIndex is less than size
		while (localIndex < MENU_OPTIONS.length)
		{
			//[0] A: Login,[1] B: Create an Account,[2] Q: Quit
			System.out.printf("%-6s%2s%-18s\n",MENU_CHARS[localIndex] + " for", "", MENU_OPTIONS[localIndex]);
			localIndex++;//increments localIndex
		}//closes display loop
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("Please enter your selection");//prompts input
	}//closes displayMainMenu
	//displays File Menu
	public static void displayFileMenu()
	{
		int localIndex = 0;//local value for indexes
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("File Menu");//title
		//while localIndex is less than size
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			//[0] A: Load Inventory,[1] B: Create Order,[2] R: Return to Main Menu
			System.out.printf("%-6s%2s%-20s\n",FILE_MENU_CHARS[localIndex] + " for", "",FILE_MENU_OPTIONS[localIndex]);
			localIndex++;//increments localIndex
		}//closes display loop
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("Enter your selection here:");//prompts input
	}//closes displayFileMenu	
	//displays Discount Menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;//local value for indexes
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("Discount Menu");//title
		//while localIndex is less than size
		while (localIndex < borrowedDiscountNames.length)
		{
			//displays line by line DiscountNames and DiscountRates
			System.out.printf("%-6s%1s%-14s%1s%4.1f%1s\n",SUB_MENU_CHARS[localIndex] + " for", "", borrowedDiscountNames[localIndex], "", borrowedDiscountRates[localIndex] * 100,"%");
			localIndex++;//increments localIndex
		}//closes display loop
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("Please enter your selection");//prompts input
	}//closes displayDiscountMenu
	//displays account creation confirmation
	public static void displayAccountResults()
	{
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("ACCOUNT RESULTS");//title
		System.out.println("New account created");//prompt
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
	}//closes displayAccountResults
	//displays account creation error
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("ACCOUNT RESULTS");//title
		System.out.println("Account not created: username," + borrowedUserName + ", already exists");//prompt
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
	}//closes displayAccountResults
	//displays login error
	public static void displayLoginError()
	{
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("LOGIN ERROR");//title
		System.out.println("Username and/or password is incorrect");//prompt
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
	}//closes displayLoginError
	//displays search prompt
	public static void displaySearchPrompt()
	{
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("Enter the search value:");//prompt
	}//closes displaySearchPrompt
	//displays number of records processed
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.printf("%3d%18s\n",borrowedRecordCount,"records processed");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
	}//closes displayRecordReport
	//displays OrderReport without discounts
	public static void displayOrderReport(String borrowedUserName,String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");//title
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-17s%2s%-19s\n", "Customer Name:", "", borrowedUserName);//userName
		System.out.println("");
		System.out.printf("%-17s%2s%-21s\n", "Item Name:", "", borrowedItemName);//itemName
		System.out.printf("%-17s%3s%6.2f\n","Item Price:","$", borrowedItemPrice);//itemPrice
		System.out.println("");
		System.out.printf("%-17s%3s%-3d\n","Quantity:","",borrowedHowMany);//howMany
		System.out.println("");
		System.out.printf("%-17s%3s%6.2f\n","Subtotal:","$",borrowedSubTotal);//subTotal
		System.out.printf("%-17s%2s%6.1f%1s\n","Tax Rate:","",borrowedTaxRate * 100,"%");//TAX_RATE
		System.out.printf("%-17s%3s%6.2f\n","Tax Amount:","$",borrowedTaxAmt);//taxAmt
		System.out.printf("%-17s%3s%6.2f\n","Order Total:","$",borrowedTotalCost);//totalCost
		System.out.println("");
		System.out.printf("%-17s%2s%-8s\n","Prize:","",borrowedPrizeName);//prizeName
		System.out.println("");
		System.out.printf("%-19s%-2d%15s\n","Buy more now: Only",borrowedInStockCount,"left in stock!");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
	}//closes displayOrderReport
	//displays OrderReport with discounts
	public static void displayOrderReport(String borrowedUserName,String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");//title
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-17s%2s%-19s\n", "User Name:", "", borrowedUserName);//userName
		System.out.printf("%-17s%2s%-22s\n", "Item Name:", "", borrowedItemName);//itemName
		System.out.printf("%-17s%3s%6.2f\n","Item Price:","$", borrowedItemPrice);//itemPrice
		System.out.println("");
		System.out.printf("%-17s%2s%-19s\n","Discount Name:","",borrowedDiscountName);//discountName
		System.out.printf("%-17s%2s%6.1f%2s\n","Discount Rate:","",borrowedDiscountRate * 100,"%");//discountRate
		System.out.printf("%-17s%3s%6.2f\n","Discount Amount:","$",borrowedDiscountAmt);//discountAmt
		System.out.printf("%-17s%3s%6.2f\n","Discount Price:", "$", borrowedDiscountPrice);//discountPrice
		System.out.println("");
		System.out.printf("%-17s%3s%5d\n","Quantity:","",borrowedHowMany);//howMany
		System.out.println("");
		System.out.printf("%-17s%3s%6.2f\n","Subtotal:","$",borrowedSubTotal);//subTotal
		System.out.printf("%-17s%2s%6.1f%2s\n","Tax Rate:","",borrowedTaxRate * 100,"%");//TAX_RATE
		System.out.printf("%-17s%3s%6.2f\n","Tax Amount:","$",borrowedTax);//taxAmt
		System.out.printf("%-17s%3s%6.2f\n","Order Total:","$",borrowedTotalCost);//totalCost
		System.out.println("");
		System.out.printf("%-17s%2s%-8s\n","Prize:","",borrowedPrizeName);//prizeName
		System.out.println("");
		System.out.printf("%-19s%-2d%15s\n","Buy more now: Only",borrowedInStockCount,"left in stock!");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
	}//closes displayOrderReport
	//displays Final Report
	public static void displayFinalReport(int[] borrowedItemIDs,String[] borrowedItemNames,double[] borrowedItemPrices,int[] borrowedOrderQuantities,double[] borrowedOrderTotals,int borrowedRecordCount,double borrowedGrandTotal)
	{
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FINAL REPORT");//title
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-3s%2s%-21s%2s%6s%2s%3s%3s%6s\n","ID","","Name","","Price","","Qty","","Total");
		//loops until localIndex reaches recordCount
		while (localIndex < borrowedRecordCount)
		{
			//prints prints order details (IDs,Names,Prices,Quantities,and totalCost)
			System.out.printf("%-3d%2s%-21s%2s%6.2f%2s%3d%3s%6.2f\n",borrowedItemIDs[localIndex],"",borrowedItemNames[localIndex],"$",borrowedItemPrices[localIndex],"",borrowedOrderQuantities[localIndex],"$",borrowedOrderTotals[localIndex]);
			localIndex++;//increments localIndex
		}//closes display loop
		System.out.printf("%-12s%2s%6.2f\n","Grand Total","$",borrowedGrandTotal);//prints grand total
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
	}//closes displayFinalReport
	//displays out of stock error
	public static void displayOutOfStock()
	{
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ "); 
		System.out.println("OUT OF STOCK ERROR");//title
		System.out.println("The quantity entered is greater than the quantity in-stock.");//displays error
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ "); 
	}//closes displayOutOfStock
	//displays error on failed file
	public static void displayNotOpen()
	{
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened.");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
	}//closes displayNotOpen
	//displays error on failed item search
	public static void displayNotFound()
	{
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found.");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");	
	}//closes displayNotFound
	//displays Inventory Loaded Report
	public static void displayInventoryLoaded()
	{
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ "); 
		System.out.println("INVENTORY LOADED REPORT");//title
		System.out.println("Inventory in-stock counts have been processed.");//prompt
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ "); 
	}//closes displayInventoryLoaded
	//gets and returns userName input
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";//local variable for userNames
		System.out.println("Enter your username:");//prompts input
		localUserName = borrowedInput.next();//sets localUserName to input
		return(localUserName);//returns localUserName to main
	}//closes getUserName
	//gets and returns password input
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";//local variable for passwords
		System.out.println("Enter your password:");//prompts input
		localPassword = borrowedInput.next();//sets localPassword to input
		return(localPassword);//returns localPassword to main
	}//closes getPassword
	//gets and returns fileName
	public static String getFilename(Scanner borrowedInput)
	{
		String localFile ="";
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ");
		System.out.println("Enter the file name with extension (file.txt):");//prompt
		localFile = borrowedInput.next();//sets localFile to input

		return(localFile);//returns localFile to main
	}//closes getFileName
	//gets valid input for Main Menu
	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayMainMenu();//displays main menu
		localSelection = borrowedInput.next().toUpperCase().charAt(0);//sets localSelection to input
		//while input is not valid option
		while(localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2])
		{
			System.out.println("Invalid selection");//displays error prompt
			displayMainMenu();//displays main menu
			localSelection = borrowedInput.next().toUpperCase().charAt(0);//sets localSelection to input
		}//closes invalid
		return(localSelection);//returns localSelection to main
	}//closes validateMainMenu
	//gets valid input for File Menu
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayFileMenu();//displays file menu
		
		localSelection = borrowedInput.next().toUpperCase().charAt(0);//sets localSelection to input
		//while input is not valid option
		while(localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1] && localSelection != FILE_MENU_CHARS[2])
		{
			System.out.println("Invalid selection");//displays error prompt
			displayFileMenu();//displays file menu
			localSelection = borrowedInput.next().toUpperCase().charAt(0);//sets localSelection to input
		}//closes invalid
		return(localSelection);//returns localSelection to main
	}//closes validateFileSelection
	//gets valid input for item search
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearch = 0;

		displaySearchPrompt();//displays prompt
		localSearch = borrowedInput.nextInt();//sets localSearch to input
		//while negative
		while (localSearch < 0)
		{
			displaySearchPrompt();//displays prompt
			localSearch = borrowedInput.nextInt();//sets loclSearch to input
		}//closes invalid

		return(localSearch);//returns localSearch to main
	}//closes validateSearchValue
	//gets valid quantity
	public static String validateHowMany(Scanner borrowedInput)
	{
		int localHowMany = 0;
		String localString = "";

		System.out.println("How many?");//prompts input
		localHowMany = borrowedInput.nextInt();//sets localHowMany to input
		//while 0 or negative
		while (localHowMany <= 0)
		{
			System.out.println("Invalid Quantity");//error prompt
			System.out.println("How many?");//prompts input
			localHowMany = borrowedInput.nextInt();//sets localHowMany to input
		}//closes invalid number
		localString = String.valueOf(localHowMany);//transfers value of localHowmany to type String
		return(localString);//returns localString to main
	}//closes validateHowMany
	//gets valid input for Discount Menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);//displays discount menu
		localSelection = borrowedInput.next().toUpperCase().charAt(0);//sets localSelection to input
		//while invalid input
		while (localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1] && localSelection != SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3] )
		{
			System.out.println("Invalid Selection");//error prompt
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);//displays discount menu
			localSelection = borrowedInput.next().toUpperCase().charAt(0);//sets localSlection to input
		}//closes invalid

		return(localSelection);//returns localChar to main
	}//closes validateDiscountMenu

}//closes class
